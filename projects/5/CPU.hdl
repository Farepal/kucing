// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    // is Instruction
    And(a=instruction[15], b=instruction[14], out=CInstruction);
    Not(in=CInstruction, out=AInstruction);

    // if CInstruction then outputALU, else instruction
    And(a=CInstruction, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=outputALU, sel=ALUtoA, out=toA);

    // AInstruction load
    Or(a=AInstruction, b=ALUtoA, out=loadA);
    ARegister(in=toA, load=loadA, out=emitA, out[0..14]=addressM);

    // Pick either A or M
    Mux16(a=emitA, b=inM, sel=instruction[12], out=toALU);

    // Settings D
    And(a=CInstruction, b=instruction[4], out=loadD);
    DRegister(in=outputALU, load=loadD, out=D);

    // ALU
    ALU(x=D, y=toALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outputALU, zr=zrOut, ng=ngOut);

    // set output
    Or16(a=false, b=outputALU, out=outM);
    And(a=CInstruction, b=instruction[3], out=writeM);

    // PC part
    And(a=instruction[2], b=ngOut, out=isNegative);
    And(a=instruction[1], b=zrOut, out=isZero);
    Or(a=ngOut, b=zrOut, out=eitherNegativeOrZero);
    Not(in=eitherNegativeOrZero, out=psOut);
    And(a=psOut, b=instruction[0], out=isPositive); 
    Or(a=isZero, b=isNegative, out=and1);
    Or(a=and1, b=isPositive, out=loadPC);
    And(a=loadPC, b=CInstruction, out=reallyLOADPC);

    Not(in=reallyLOADPC, out=incPC);

    PC(in=emitA, inc=incPC, load=reallyLOADPC, reset=reset, out[0..14]=pc);
}